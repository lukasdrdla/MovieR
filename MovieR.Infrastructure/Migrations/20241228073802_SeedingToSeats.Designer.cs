// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieR.Infrastructure.Data;

#nullable disable

namespace MovieR.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241228073802_SeedingToSeats")]
    partial class SeedingToSeats
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MovieR.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MovieR.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2612a288-156a-49e3-8d40-09a00330cb3a"),
                            Description = "Two imprisoned",
                            DurationMinutes = 0,
                            Genre = "",
                            PosterUrl = "",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Shawshank Redemption"
                        },
                        new
                        {
                            Id = new Guid("1f9284eb-afa1-4372-9fe7-23adcf42fc7a"),
                            Description = "The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.",
                            DurationMinutes = 0,
                            Genre = "",
                            PosterUrl = "",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Godfather"
                        },
                        new
                        {
                            Id = new Guid("39544054-30a8-4e5f-a4fd-3dc957c99669"),
                            Description = "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
                            DurationMinutes = 0,
                            Genre = "",
                            PosterUrl = "",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Dark Knight"
                        },
                        new
                        {
                            Id = new Guid("c6ef9da8-bb4c-4efe-8a93-da6f51f87a1b"),
                            Description = "The Dark Knight of Gotham City begins his war on crime with his first major enemy being Jack Napier, a criminal who becomes the clownishly homicidal Joker.",
                            DurationMinutes = 0,
                            Genre = "",
                            PosterUrl = "",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Batman"
                        },
                        new
                        {
                            Id = new Guid("23c42bb7-09c9-45e0-8bd3-16b3036ab934"),
                            Description = "Gandalf and Aragorn lead the World",
                            DurationMinutes = 0,
                            Genre = "",
                            PosterUrl = "",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Lord of the Rings: The Return of the King"
                        },
                        new
                        {
                            Id = new Guid("2710da4d-ffe9-4e5b-bdaf-b3843fa3c6b0"),
                            Description = "The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption.",
                            DurationMinutes = 0,
                            Genre = "",
                            PosterUrl = "",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Pulp Fiction"
                        });
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ScreeningId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.ReservedSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("SeatId");

                    b.ToTable("ReservedSeats");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Screening", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ScreeningRoomId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScreeningRoomId");

                    b.ToTable("Screenings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93a8a0cb-3555-4912-a854-41262759e831"),
                            MovieId = new Guid("2612a288-156a-49e3-8d40-09a00330cb3a"),
                            ScreeningRoomId = new Guid("f8f04731-2eda-41d4-966d-092f1e28eb07"),
                            StartDate = new DateTime(2024, 12, 29, 8, 38, 2, 169, DateTimeKind.Local).AddTicks(770)
                        },
                        new
                        {
                            Id = new Guid("a54717d6-6841-49a2-a7a8-463665cac233"),
                            MovieId = new Guid("1f9284eb-afa1-4372-9fe7-23adcf42fc7a"),
                            ScreeningRoomId = new Guid("04834c6d-5384-487d-8267-f0e0c450c9c6"),
                            StartDate = new DateTime(2024, 12, 30, 8, 38, 2, 169, DateTimeKind.Local).AddTicks(820)
                        },
                        new
                        {
                            Id = new Guid("457f6f49-9348-43e6-9fb9-b252dc9a3bb6"),
                            MovieId = new Guid("39544054-30a8-4e5f-a4fd-3dc957c99669"),
                            ScreeningRoomId = new Guid("b2297133-7f2c-4965-8e03-ec58d15fa1ac"),
                            StartDate = new DateTime(2024, 12, 31, 8, 38, 2, 169, DateTimeKind.Local).AddTicks(830)
                        },
                        new
                        {
                            Id = new Guid("40cc3132-00bb-46da-affd-9f62c5275c3b"),
                            MovieId = new Guid("c6ef9da8-bb4c-4efe-8a93-da6f51f87a1b"),
                            ScreeningRoomId = new Guid("9e3364cc-a114-4b60-9c82-adfe2aa7874f"),
                            StartDate = new DateTime(2025, 1, 1, 8, 38, 2, 169, DateTimeKind.Local).AddTicks(830)
                        },
                        new
                        {
                            Id = new Guid("92f07277-7ec8-463c-9600-286d41c3b289"),
                            MovieId = new Guid("23c42bb7-09c9-45e0-8bd3-16b3036ab934"),
                            ScreeningRoomId = new Guid("893a63ad-bb4b-473c-9207-bbb9a16eacfe"),
                            StartDate = new DateTime(2025, 1, 2, 8, 38, 2, 169, DateTimeKind.Local).AddTicks(830)
                        },
                        new
                        {
                            Id = new Guid("d5aae6a7-baad-41bb-bd3e-ff56175376d9"),
                            MovieId = new Guid("2710da4d-ffe9-4e5b-bdaf-b3843fa3c6b0"),
                            ScreeningRoomId = new Guid("f8f04731-2eda-41d4-966d-092f1e28eb07"),
                            StartDate = new DateTime(2025, 1, 3, 8, 38, 2, 169, DateTimeKind.Local).AddTicks(840)
                        });
                });

            modelBuilder.Entity("MovieR.Domain.Entities.ScreeningRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalColumns")
                        .HasColumnType("int");

                    b.Property<int>("TotalRows")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScreeningRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8f04731-2eda-41d4-966d-092f1e28eb07"),
                            MaxCapacity = 0,
                            Name = "Sál 1",
                            TotalColumns = 10,
                            TotalRows = 10
                        },
                        new
                        {
                            Id = new Guid("04834c6d-5384-487d-8267-f0e0c450c9c6"),
                            MaxCapacity = 0,
                            Name = "Sál 2",
                            TotalColumns = 8,
                            TotalRows = 20
                        },
                        new
                        {
                            Id = new Guid("b2297133-7f2c-4965-8e03-ec58d15fa1ac"),
                            MaxCapacity = 0,
                            Name = "Sál 3",
                            TotalColumns = 12,
                            TotalRows = 15
                        },
                        new
                        {
                            Id = new Guid("9e3364cc-a114-4b60-9c82-adfe2aa7874f"),
                            MaxCapacity = 0,
                            Name = "Sál 4",
                            TotalColumns = 15,
                            TotalRows = 15
                        },
                        new
                        {
                            Id = new Guid("893a63ad-bb4b-473c-9207-bbb9a16eacfe"),
                            MaxCapacity = 0,
                            Name = "Sál 5",
                            TotalColumns = 10,
                            TotalRows = 10
                        });
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<Guid>("ScreeningId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a85110e0-97cf-4fe2-9936-6ce87c1408ef"),
                            Column = 1,
                            IsAvailable = true,
                            Row = 1,
                            ScreeningId = new Guid("93a8a0cb-3555-4912-a854-41262759e831")
                        },
                        new
                        {
                            Id = new Guid("8f74d1ed-e741-4bb5-a31b-37acccffe6c5"),
                            Column = 2,
                            IsAvailable = true,
                            Row = 1,
                            ScreeningId = new Guid("93a8a0cb-3555-4912-a854-41262759e831")
                        },
                        new
                        {
                            Id = new Guid("49b1fadf-925e-4683-80e0-8c0b5cc65376"),
                            Column = 3,
                            IsAvailable = true,
                            Row = 1,
                            ScreeningId = new Guid("93a8a0cb-3555-4912-a854-41262759e831")
                        },
                        new
                        {
                            Id = new Guid("9e317427-bbd3-4a45-b418-9ff1284087be"),
                            Column = 4,
                            IsAvailable = true,
                            Row = 1,
                            ScreeningId = new Guid("93a8a0cb-3555-4912-a854-41262759e831")
                        },
                        new
                        {
                            Id = new Guid("380711d8-7760-4c21-b638-bbb4e3bcd234"),
                            Column = 5,
                            IsAvailable = true,
                            Row = 1,
                            ScreeningId = new Guid("93a8a0cb-3555-4912-a854-41262759e831")
                        },
                        new
                        {
                            Id = new Guid("15133da9-aabb-449a-9f8e-44d38f171e94"),
                            Column = 6,
                            IsAvailable = true,
                            Row = 1,
                            ScreeningId = new Guid("93a8a0cb-3555-4912-a854-41262759e831")
                        });
                });

            modelBuilder.Entity("MovieR.Domain.Entities.TicketPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ScreeningId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId");

                    b.ToTable("TicketPrices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MovieR.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MovieR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MovieR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MovieR.Domain.Entities.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MovieR.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MovieR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("MovieR.Domain.Entities.Screening", "Screening")
                        .WithMany("Reservations")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieR.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screening");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.ReservedSeat", b =>
                {
                    b.HasOne("MovieR.Domain.Entities.Reservation", "Reservation")
                        .WithMany("ReservedSeats")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieR.Domain.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Review", b =>
                {
                    b.HasOne("MovieR.Domain.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieR.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Screening", b =>
                {
                    b.HasOne("MovieR.Domain.Entities.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieR.Domain.Entities.ScreeningRoom", "ScreeningRoom")
                        .WithMany("Screenings")
                        .HasForeignKey("ScreeningRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("ScreeningRoom");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Seat", b =>
                {
                    b.HasOne("MovieR.Domain.Entities.Screening", "Screening")
                        .WithMany("Seats")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.TicketPrice", b =>
                {
                    b.HasOne("MovieR.Domain.Entities.Screening", "Screening")
                        .WithMany("TicketPrices")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Movie", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Reservation", b =>
                {
                    b.Navigation("ReservedSeats");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.Screening", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Seats");

                    b.Navigation("TicketPrices");
                });

            modelBuilder.Entity("MovieR.Domain.Entities.ScreeningRoom", b =>
                {
                    b.Navigation("Screenings");
                });
#pragma warning restore 612, 618
        }
    }
}
